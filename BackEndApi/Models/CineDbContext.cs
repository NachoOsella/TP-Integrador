// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace BackEndApi.Models;

public partial class CineDbContext : DbContext
{
    public CineDbContext(DbContextOptions<CineDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Actore> Actores { get; set; }

    public virtual DbSet<Barrio> Barrios { get; set; }

    public virtual DbSet<Butaca> Butacas { get; set; }

    public virtual DbSet<Cliente> Clientes { get; set; }

    public virtual DbSet<DetalleFactura> DetalleFacturas { get; set; }

    public virtual DbSet<Directore> Directores { get; set; }

    public virtual DbSet<Edade> Edades { get; set; }

    public virtual DbSet<Factura> Facturas { get; set; }

    public virtual DbSet<FormasDePago> FormasDePagos { get; set; }

    public virtual DbSet<FormatoPelicula> FormatoPeliculas { get; set; }

    public virtual DbSet<Funcione> Funciones { get; set; }

    public virtual DbSet<GenerosPeli> GenerosPelis { get; set; }

    public virtual DbSet<Idioma> Idiomas { get; set; }

    public virtual DbSet<Pelicula> Peliculas { get; set; }

    public virtual DbSet<Promocione> Promociones { get; set; }

    public virtual DbSet<Reserva> Reservas { get; set; }

    public virtual DbSet<Sala> Salas { get; set; }

    public virtual DbSet<Sucursale> Sucursales { get; set; }

    public virtual DbSet<Ticket> Tickets { get; set; }

    public virtual DbSet<TipoSala> TipoSalas { get; set; }

    public virtual DbSet<TiposButaca> TiposButacas { get; set; }

    public virtual DbSet<TiposDocumento> TiposDocumentos { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Actore>(entity =>
        {
            entity.HasKey(e => e.IdActor).HasName("pk_actor");

            entity.Property(e => e.IdActor).HasColumnName("id_actor");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<Barrio>(entity =>
        {
            entity.HasKey(e => e.IdBarrio).HasName("pk_Barrios");

            entity.Property(e => e.IdBarrio).HasColumnName("id_Barrio");
            entity.Property(e => e.NombreBarrio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Nombre_Barrio");
        });

        modelBuilder.Entity<Butaca>(entity =>
        {
            entity.HasKey(e => e.IdButaca).HasName("pk_butaca");

            entity.Property(e => e.IdButaca).HasColumnName("id_butaca");
            entity.Property(e => e.Disponible).HasColumnName("disponible");
            entity.Property(e => e.IdTipoButaca).HasColumnName("id_tipo_butaca");
            entity.Property(e => e.NroButaca).HasColumnName("nro_butaca");
            entity.Property(e => e.NroSala).HasColumnName("nro_sala");

            entity.HasOne(d => d.IdTipoButacaNavigation).WithMany(p => p.Butacas)
                .HasForeignKey(d => d.IdTipoButaca)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_id_tipo_butaca");

            entity.HasOne(d => d.NroSalaNavigation).WithMany(p => p.Butacas)
                .HasForeignKey(d => d.NroSala)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_nro_Sala");
        });

        modelBuilder.Entity<Cliente>(entity =>
        {
            entity.HasKey(e => e.IdCliente).HasName("pk_Clientes");

            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.Apellido)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("apellido");
            entity.Property(e => e.Contraseña)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("contraseña");
            entity.Property(e => e.Dni).HasColumnName("dni");
            entity.Property(e => e.IdTipoDoc).HasColumnName("Id_tipo_Doc");
            entity.Property(e => e.Mail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("mail");
            entity.Property(e => e.Nombre)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.Telefono).HasColumnName("telefono");

            entity.HasOne(d => d.IdTipoDocNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdTipoDoc)
                .HasConstraintName("fk_tipoDoc_cliente");
        });

        modelBuilder.Entity<DetalleFactura>(entity =>
        {
            entity.HasKey(e => e.IdDetalleFactura).HasName("pk_Detalle_factura");

            entity.ToTable("Detalle_Factura");

            entity.Property(e => e.IdDetalleFactura).HasColumnName("id_detalle_factura");
            entity.Property(e => e.CodPromocion).HasColumnName("cod_promocion");
            entity.Property(e => e.NroFactura).HasColumnName("nro_factura");
            entity.Property(e => e.NroFuncion).HasColumnName("nro_funcion");

            entity.HasOne(d => d.CodPromocionNavigation).WithMany(p => p.DetalleFacturas)
                .HasForeignKey(d => d.CodPromocion)
                .HasConstraintName("fk_DetFac_Prom");

            entity.HasOne(d => d.NroFacturaNavigation).WithMany(p => p.DetalleFacturas)
                .HasForeignKey(d => d.NroFactura)
                .HasConstraintName("fk_DetFac_Factura");

            entity.HasOne(d => d.NroFuncionNavigation).WithMany(p => p.DetalleFacturas)
                .HasForeignKey(d => d.NroFuncion)
                .HasConstraintName("fk_DetFac_Funcion");
        });

        modelBuilder.Entity<Directore>(entity =>
        {
            entity.HasKey(e => e.IdDirector).HasName("pk_director");

            entity.Property(e => e.IdDirector).HasColumnName("id_director");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<Edade>(entity =>
        {
            entity.HasKey(e => e.IdEdad).HasName("pk_edad");

            entity.Property(e => e.IdEdad).HasColumnName("id_edad");
            entity.Property(e => e.Clasificacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("clasificacion");
        });

        modelBuilder.Entity<Factura>(entity =>
        {
            entity.HasKey(e => e.NroFactura).HasName("pk_nro_factura");

            entity.Property(e => e.NroFactura).HasColumnName("nro_factura");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("fecha");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.IdFormaDePago).HasColumnName("id_forma_de_pago");
            entity.Property(e => e.Monto)
                .HasColumnType("money")
                .HasColumnName("monto");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Facturas)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("fk_id_clientel");

            entity.HasOne(d => d.IdFormaDePagoNavigation).WithMany(p => p.Facturas)
                .HasForeignKey(d => d.IdFormaDePago)
                .HasConstraintName("fk_id_forma_de_pago");
        });

        modelBuilder.Entity<FormasDePago>(entity =>
        {
            entity.HasKey(e => e.IdFormaDePago).HasName("pk_id_forma_de_pago");

            entity.ToTable("Formas_de_pago");

            entity.Property(e => e.IdFormaDePago)
                .ValueGeneratedNever()
                .HasColumnName("id_forma_de_pago");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<FormatoPelicula>(entity =>
        {
            entity.HasKey(e => e.IdFormato).HasName("pk_Formato_peli");

            entity.ToTable("Formato_Peliculas");

            entity.Property(e => e.IdFormato).HasColumnName("id_formato");
            entity.Property(e => e.TipoFormato)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Tipo_formato");
        });

        modelBuilder.Entity<Funcione>(entity =>
        {
            entity.HasKey(e => e.NroFuncion).HasName("pk_nro_funcion");

            entity.Property(e => e.NroFuncion).HasColumnName("nro_funcion");
            entity.Property(e => e.Dia)
                .HasColumnType("datetime")
                .HasColumnName("dia");
            entity.Property(e => e.Hora)
                .HasColumnType("datetime")
                .HasColumnName("hora");
            entity.Property(e => e.IdFormato).HasColumnName("id_formato");
            entity.Property(e => e.IdIdioma).HasColumnName("id_idioma");
            entity.Property(e => e.IdPelicula).HasColumnName("id_pelicula");
            entity.Property(e => e.NroSala).HasColumnName("nro_sala");

            entity.HasOne(d => d.IdFormatoNavigation).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.IdFormato)
                .HasConstraintName("FK__Funciones__id_fo__628FA481");

            entity.HasOne(d => d.IdIdiomaNavigation).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.IdIdioma)
                .HasConstraintName("FK__Funciones__id_id__6383C8BA");

            entity.HasOne(d => d.IdPeliculaNavigation).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.IdPelicula)
                .HasConstraintName("FK__Funciones__id_pe__60A75C0F");

            entity.HasOne(d => d.NroSalaNavigation).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.NroSala)
                .HasConstraintName("FK__Funciones__nro_s__619B8048");
        });

        modelBuilder.Entity<GenerosPeli>(entity =>
        {
            entity.HasKey(e => e.IdGenero).HasName("pk_genero");

            entity.ToTable("Generos_pelis");

            entity.Property(e => e.IdGenero).HasColumnName("id_genero");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<Idioma>(entity =>
        {
            entity.HasKey(e => e.IdIdioma).HasName("pk_idioma");

            entity.ToTable("Idioma");

            entity.Property(e => e.IdIdioma).HasColumnName("id_idioma");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.Subtitulos).HasColumnName("subtitulos");
        });

        modelBuilder.Entity<Pelicula>(entity =>
        {
            entity.HasKey(e => e.IdPelicula).HasName("pk_pelicula");

            entity.Property(e => e.IdPelicula).HasColumnName("id_pelicula");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.Duracion).HasColumnName("duracion");
            entity.Property(e => e.Estreno).HasColumnName("estreno");
            entity.Property(e => e.IdDirector).HasColumnName("id_director");
            entity.Property(e => e.IdEdad).HasColumnName("id_edad");
            entity.Property(e => e.IdGenero).HasColumnName("id_genero");
            entity.Property(e => e.Titulo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("titulo");
            entity.Property(e => e.Url)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("url");

            entity.HasOne(d => d.IdDirectorNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdDirector)
                .HasConstraintName("fk_direct");

            entity.HasOne(d => d.IdEdadNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdEdad)
                .HasConstraintName("fk_edad");

            entity.HasOne(d => d.IdGeneroNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdGenero)
                .HasConstraintName("fk_genero");

            entity.HasMany(d => d.IdActors).WithMany(p => p.IdPeliculas)
                .UsingEntity<Dictionary<string, object>>(
                    "PeliActor",
                    r => r.HasOne<Actore>().WithMany()
                        .HasForeignKey("IdActor")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_actor"),
                    l => l.HasOne<Pelicula>().WithMany()
                        .HasForeignKey("IdPelicula")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("fk_peli"),
                    j =>
                    {
                        j.HasKey("IdPelicula", "IdActor").HasName("pk_peli_actor");
                        j.ToTable("Peli_Actor");
                        j.IndexerProperty<int>("IdPelicula").HasColumnName("id_pelicula");
                        j.IndexerProperty<int>("IdActor").HasColumnName("id_actor");
                    });
        });

        modelBuilder.Entity<Promocione>(entity =>
        {
            entity.HasKey(e => e.CodPromocion).HasName("pk_cod_promocion");

            entity.Property(e => e.CodPromocion)
                .ValueGeneratedNever()
                .HasColumnName("cod_promocion");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.Descuento).HasColumnName("descuento");
            entity.Property(e => e.FecFin)
                .HasColumnType("datetime")
                .HasColumnName("fec_fin");
            entity.Property(e => e.FecInicio)
                .HasColumnType("datetime")
                .HasColumnName("fec_inicio");
        });

        modelBuilder.Entity<Reserva>(entity =>
        {
            entity.HasKey(e => e.IdReserva).HasName("pk_reserva");

            entity.Property(e => e.IdReserva).HasColumnName("id_reserva");
            entity.Property(e => e.Confirmacion).HasColumnName("confirmacion");
            entity.Property(e => e.FechaReserva)
                .HasColumnType("datetime")
                .HasColumnName("fecha_reserva");
            entity.Property(e => e.IdCliente).HasColumnName("id_cliente");
            entity.Property(e => e.NroFuncion).HasColumnName("nro_funcion");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Reservas)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("fk_cliente");

            entity.HasOne(d => d.NroFuncionNavigation).WithMany(p => p.Reservas)
                .HasForeignKey(d => d.NroFuncion)
                .HasConstraintName("fk_nro_funcion");
        });

        modelBuilder.Entity<Sala>(entity =>
        {
            entity.HasKey(e => e.NroSala).HasName("pk_nro_sala");

            entity.Property(e => e.NroSala)
                .ValueGeneratedNever()
                .HasColumnName("nro_sala");
            entity.Property(e => e.Capacidad).HasColumnName("capacidad");
            entity.Property(e => e.IdSucursal).HasColumnName("id_sucursal");
            entity.Property(e => e.IdTipoSala).HasColumnName("id_tipo_sala");

            entity.HasOne(d => d.IdSucursalNavigation).WithMany(p => p.Salas)
                .HasForeignKey(d => d.IdSucursal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_id_sucursal");

            entity.HasOne(d => d.IdTipoSalaNavigation).WithMany(p => p.Salas)
                .HasForeignKey(d => d.IdTipoSala)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_id_tipo_sala");
        });

        modelBuilder.Entity<Sucursale>(entity =>
        {
            entity.HasKey(e => e.IdSucursal).HasName("pk_id_sucursal");

            entity.Property(e => e.IdSucursal)
                .ValueGeneratedNever()
                .HasColumnName("id_sucursal");
            entity.Property(e => e.IdBarrio).HasColumnName("id_barrio");
            entity.Property(e => e.NombreSucursal)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre_sucursal");

            entity.HasOne(d => d.IdBarrioNavigation).WithMany(p => p.Sucursales)
                .HasForeignKey(d => d.IdBarrio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_id_barrio");
        });

        modelBuilder.Entity<Ticket>(entity =>
        {
            entity.HasKey(e => new { e.NroTicket, e.NroFuncion, e.IdButaca }).HasName("pk_ticket");

            entity.Property(e => e.NroTicket)
                .ValueGeneratedOnAdd()
                .HasColumnName("nro_Ticket");
            entity.Property(e => e.NroFuncion).HasColumnName("nro_funcion");
            entity.Property(e => e.IdButaca).HasColumnName("id_butaca");

            entity.HasOne(d => d.IdButacaNavigation).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.IdButaca)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ticket_butaca");

            entity.HasOne(d => d.NroFuncionNavigation).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.NroFuncion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ticket_funcion");
        });

        modelBuilder.Entity<TipoSala>(entity =>
        {
            entity.HasKey(e => e.IdTipoSala).HasName("pk_TipoSala");

            entity.ToTable("Tipo_Salas");

            entity.Property(e => e.IdTipoSala).HasColumnName("id_tipo_Sala");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TiposButaca>(entity =>
        {
            entity.HasKey(e => e.IdTipoButaca).HasName("pk_id_tipo_butaca");

            entity.ToTable("Tipos_Butacas");

            entity.Property(e => e.IdTipoButaca).HasColumnName("id_tipo_butaca");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<TiposDocumento>(entity =>
        {
            entity.HasKey(e => e.IdTipoDoc).HasName("pk_Tipo_Documentos");

            entity.ToTable("Tipos_Documentos");

            entity.Property(e => e.IdTipoDoc).HasColumnName("Id_tipo_Doc");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}